*tool-resolver.nvim.txt*

Resolve project-local CLI tools in Neovim with monorepo-aware logic.

==============================================================================
Table of Contents                                       *tool-resolver.nvim.toc*

API ··················································· |tool-resolver.nvim.api|
Configurations ····································· |tool-resolver.nvim.config|
Types ··············································· |tool-resolver.nvim.types|

==============================================================================
API                                                     *tool-resolver.nvim.api*

M.setup                                           *tool-resolver.nvim.api.setup*
    Entry point to setup the plugin

    Type: ~
        (fun(user_config?:ToolResolver.Config))


M.get_bin                                       *tool-resolver.nvim.api.get_bin*
    Resolving tools for specified types. The tool will try to resolve the binary from the current buffer path,
    then from cwd if not found, and finally fallback to the configured fallback or tool name.

    Type: ~
        (fun(tool:string,opts?:ToolResolver.GetBinOpts):string)  -- references the signature from resolvers.get_bin


==============================================================================
Configurations                                       *tool-resolver.nvim.config*


Example Configuration:

>
{
   -- register the tools that you want to use here
   tools = {
    biome = {
     type = "node", -- type is required, and only "node" is supported for now
    },
    prettier = {
     type = "node", -- type is required, and only "node" is supported for now
     fallback = "prettierd", -- specify a fallback binary name will resolve to this, else will fallback to the key `prettier`
    },
  },
}
<


M.config                                      *tool-resolver.nvim.config.config*
    User-provided config, merged with defaults

    Type: ~
        (ToolResolver.Config)


==============================================================================
Types                                                 *tool-resolver.nvim.types*

                                  *tool-resolver.nvim.types.ToolResolver.Config*
ToolResolver.Config
    Config

    Fields: ~
        {tools}  (table<string,ToolResolver.Config.Tools>)  tools with type and fallback


                            *tool-resolver.nvim.types.ToolResolver.Config.Tools*
ToolResolver.Config.Tools
    Config Tools

    Fields: ~
        {type}       (ToolResolver.ResolverType)
        {fallback?}  (string)                     fallback binary name, if not specified then use the key.


                              *tool-resolver.nvim.types.ToolResolver.GetBinOpts*
ToolResolver.GetBinOpts
    `get_bin` options

    Fields: ~
        {path?}  (string)  start search path (default: current buffer)


                            *tool-resolver.nvim.types.ToolResolver.ResolverType*
ToolResolver.ResolverType
    Resolver types

    Variants: ~
        ("node")  node-based resolver (e.g. using node_modules)


                            *tool-resolver.nvim.types.ToolResolver.ResolverMeta*
ToolResolver.ResolverMeta
    Resolver metadata

    Fields: ~
        {root_markers}  (string[])  root_markers
        {bin_subpath}   (string[])  bin_subpath


vim:tw=78:ts=8:noet:ft=help:norl:
